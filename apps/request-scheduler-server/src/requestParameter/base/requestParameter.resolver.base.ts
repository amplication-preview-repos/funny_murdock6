/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RequestParameter } from "./RequestParameter";
import { RequestParameterCountArgs } from "./RequestParameterCountArgs";
import { RequestParameterFindManyArgs } from "./RequestParameterFindManyArgs";
import { RequestParameterFindUniqueArgs } from "./RequestParameterFindUniqueArgs";
import { CreateRequestParameterArgs } from "./CreateRequestParameterArgs";
import { UpdateRequestParameterArgs } from "./UpdateRequestParameterArgs";
import { DeleteRequestParameterArgs } from "./DeleteRequestParameterArgs";
import { Url } from "../../url/base/Url";
import { RequestParameterService } from "../requestParameter.service";
@graphql.Resolver(() => RequestParameter)
export class RequestParameterResolverBase {
  constructor(protected readonly service: RequestParameterService) {}

  async _requestParametersMeta(
    @graphql.Args() args: RequestParameterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RequestParameter])
  async requestParameters(
    @graphql.Args() args: RequestParameterFindManyArgs
  ): Promise<RequestParameter[]> {
    return this.service.requestParameters(args);
  }

  @graphql.Query(() => RequestParameter, { nullable: true })
  async requestParameter(
    @graphql.Args() args: RequestParameterFindUniqueArgs
  ): Promise<RequestParameter | null> {
    const result = await this.service.requestParameter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RequestParameter)
  async createRequestParameter(
    @graphql.Args() args: CreateRequestParameterArgs
  ): Promise<RequestParameter> {
    return await this.service.createRequestParameter({
      ...args,
      data: {
        ...args.data,

        url: args.data.url
          ? {
              connect: args.data.url,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RequestParameter)
  async updateRequestParameter(
    @graphql.Args() args: UpdateRequestParameterArgs
  ): Promise<RequestParameter | null> {
    try {
      return await this.service.updateRequestParameter({
        ...args,
        data: {
          ...args.data,

          url: args.data.url
            ? {
                connect: args.data.url,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RequestParameter)
  async deleteRequestParameter(
    @graphql.Args() args: DeleteRequestParameterArgs
  ): Promise<RequestParameter | null> {
    try {
      return await this.service.deleteRequestParameter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Url, {
    nullable: true,
    name: "url",
  })
  async getUrl(
    @graphql.Parent() parent: RequestParameter
  ): Promise<Url | null> {
    const result = await this.service.getUrl(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
