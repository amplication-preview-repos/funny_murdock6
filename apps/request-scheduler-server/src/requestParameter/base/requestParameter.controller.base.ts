/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RequestParameterService } from "../requestParameter.service";
import { RequestParameterCreateInput } from "./RequestParameterCreateInput";
import { RequestParameter } from "./RequestParameter";
import { RequestParameterFindManyArgs } from "./RequestParameterFindManyArgs";
import { RequestParameterWhereUniqueInput } from "./RequestParameterWhereUniqueInput";
import { RequestParameterUpdateInput } from "./RequestParameterUpdateInput";

export class RequestParameterControllerBase {
  constructor(protected readonly service: RequestParameterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RequestParameter })
  async createRequestParameter(
    @common.Body() data: RequestParameterCreateInput
  ): Promise<RequestParameter> {
    return await this.service.createRequestParameter({
      data: {
        ...data,

        url: data.url
          ? {
              connect: data.url,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,

        url: {
          select: {
            id: true,
          },
        },

        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RequestParameter] })
  @ApiNestedQuery(RequestParameterFindManyArgs)
  async requestParameters(
    @common.Req() request: Request
  ): Promise<RequestParameter[]> {
    const args = plainToClass(RequestParameterFindManyArgs, request.query);
    return this.service.requestParameters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,

        url: {
          select: {
            id: true,
          },
        },

        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RequestParameter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async requestParameter(
    @common.Param() params: RequestParameterWhereUniqueInput
  ): Promise<RequestParameter | null> {
    const result = await this.service.requestParameter({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,

        url: {
          select: {
            id: true,
          },
        },

        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RequestParameter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRequestParameter(
    @common.Param() params: RequestParameterWhereUniqueInput,
    @common.Body() data: RequestParameterUpdateInput
  ): Promise<RequestParameter | null> {
    try {
      return await this.service.updateRequestParameter({
        where: params,
        data: {
          ...data,

          url: data.url
            ? {
                connect: data.url,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,

          url: {
            select: {
              id: true,
            },
          },

          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RequestParameter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRequestParameter(
    @common.Param() params: RequestParameterWhereUniqueInput
  ): Promise<RequestParameter | null> {
    try {
      return await this.service.deleteRequestParameter({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,

          url: {
            select: {
              id: true,
            },
          },

          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
