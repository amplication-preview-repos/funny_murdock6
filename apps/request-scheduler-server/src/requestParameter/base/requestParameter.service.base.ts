/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RequestParameter as PrismaRequestParameter,
  Url as PrismaUrl,
} from "@prisma/client";

export class RequestParameterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RequestParameterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.requestParameter.count(args);
  }

  async requestParameters(
    args: Prisma.RequestParameterFindManyArgs
  ): Promise<PrismaRequestParameter[]> {
    return this.prisma.requestParameter.findMany(args);
  }
  async requestParameter(
    args: Prisma.RequestParameterFindUniqueArgs
  ): Promise<PrismaRequestParameter | null> {
    return this.prisma.requestParameter.findUnique(args);
  }
  async createRequestParameter(
    args: Prisma.RequestParameterCreateArgs
  ): Promise<PrismaRequestParameter> {
    return this.prisma.requestParameter.create(args);
  }
  async updateRequestParameter(
    args: Prisma.RequestParameterUpdateArgs
  ): Promise<PrismaRequestParameter> {
    return this.prisma.requestParameter.update(args);
  }
  async deleteRequestParameter(
    args: Prisma.RequestParameterDeleteArgs
  ): Promise<PrismaRequestParameter> {
    return this.prisma.requestParameter.delete(args);
  }

  async getUrl(parentId: string): Promise<PrismaUrl | null> {
    return this.prisma.requestParameter
      .findUnique({
        where: { id: parentId },
      })
      .url();
  }
}
